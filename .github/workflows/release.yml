name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rid: linux-x64
          - os: windows-latest
            rid: win-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x-preview.1'
          dotnet-quality: 'preview'

      - name: Install dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet publish -c Release -r ${{ matrix.rid }} --self-contained true /p:PublishSingleFile=true /p:PublishTrimmed=false

      - name: Archive production artifacts (Linux)
        if: runner.os == 'Linux'
        run: tar -czvf release.tar.gz -C SPFSteamroller/bin/Release/net9.0/${{ matrix.rid }}/publish .
        shell: bash

      - name: Archive production artifacts (Windows)
        if: runner.os == 'Windows'
        run: Compress-Archive -Path SPFSteamroller/bin/Release/net9.0/${{ matrix.rid }}/publish/* -DestinationPath release.zip
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.rid }}
          path: ${{ runner.os == 'Linux' && 'release.tar.gz' || 'release.zip' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: release-linux-x64
          path: ./release

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: release-win-x64
          path: ./release

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Linux artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/release.tar.gz
          asset_name: SPFSteamroller-linux-x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/release.zip
          asset_name: SPFSteamroller-windows-x64.zip
          asset_content_type: application/zip
